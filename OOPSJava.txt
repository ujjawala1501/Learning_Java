Class & Object 
https://www.javatpoint.com/object-and-class-in-java

#new keyword in Java
The new keyword is used to allocate memory at runtime. All objects get memory in Heap memory area.

# What is an object in Java
An entity that has state and behavior is known as an object e.g., chair, bike, marker, pen, table, car, etc. It can be physical or logical (tangible and intangible).
An object is an instance of a class. A class is a template or blueprint from which objects are created. So, an object is the instance(result) of a class.

Object Definitions:
*An object is a real-world entity.
*An object is a runtime entity.
*The object is an entity which has state and behavior.
*The object is an instance of a class.


# What is a class in Java
A class is a group of objects which have common properties. It is a template or blueprint from which objects are created. It is a logical entity. It can't be physical.
A class in Java can contain:
*Fields
*Methods
*Constructors
*Blocks
*Nested class and interface

#Syntax to declare a class:
class <class_name>{  
    field;  
    method;  
}  

#EXAMPLE OF JAVA PGM:
//Java Program to illustrate how to define a class and fields  
//Defining a Student class.  
class Student{  
 //defining fields  
 int id;                                        //field or data member or instance variable  
 String name;   
 public static void main(String args[]){        //creating main method inside the Student class  
  Student s1=new Student();                     //Creating an object or instance//creating an object of Student  
  System.out.println(s1.id);                   //Printing values of the object//accessing member through reference variable  
  System.out.println(s1.name);  
 }  
}  

#OOPs (Object-Oriented Programming System)
Object means a real-world entity such as a pen, chair, table, computer, watch, etc. Object-Oriented Programming is a methodology or paradigm to design a program using classes and objects. It simplifies software development and maintenance by providing some concepts:
Object
Class
Inheritance  -refere to Inheritance.java file 
Polymorphism
Abstraction
Encapsulation

Apart from these concepts, there are some other terms which are used in Object-Oriented design:
Coupling
Cohesion
Association
Aggregation
Composition

#Inheritance
Inheritance in Java is a mechanism in which one object acquires all the properties and behaviors of a parent object. 
It is an important part of OOPs (Object Oriented programming system).

Why use Inheritance in java
For Method Overriding (so runtime polymorphism can be achieved).
For Code Reusability.

Terms used in Inheritance
Class: A class is a group of objects which have common properties. It is a template or blueprint from which objects are created.
Sub Class/Child Class: Subclass is a class which inherits the other class. It is also called a derived class, extended class, or child class.
Super Class/Parent Class: Superclass is the class from where a subclass inherits the features. It is also called a base class or a parent class.
Reusability: As the name specifies, reusability is a mechanism which facilitates you to reuse the fields and methods of the existing class when you create a new class. You can use the same fields and methods already defined in the previous class.
The syntax of Java Inheritance

class Subclass-name extends Superclass-name  
{  
   //methods and fields  
}  
The extends keyword indicates that you are making a new class that derives from an existing class. The meaning of "extends" is to increase the functionality.

//OOPS 
//https://www.youtube.com/watch?v=bSrm9RXwBaI&list=PLfqMhTWNBTe3LtFWcvwpqTkUSlB32kJop&index=24

//CLASSES AND OBJECTS 
class means a blueprint of an object (ex:A blueprint for maruti car ,to make multiple cars we need one blueprint)

class Pen{
    String colour;
    String type; //ballpoint,gel

    public void write(){   //functions inside a class is method
        System.out.println("Writing Something");
    }

    public void printColor(){
        System.out.println(this.color); //"this" here is a keyword which will tell this function which object has called it.
    }
}

class Student{
    String name;
    int age;

    public void printInfo(){
        System.out.println(this.name);
        System.out.println(this.age);
    }

}
public class OOPS {
    //object of the class pen
    public statis void main(String args[]){
    // name of class   is "Pen" so object name should be "pen1"
        Pen pen1 = new Pen();
        //to access the quality from class
        pen1.colour="blue";
        pen1.type="gel";

        pen1.write( );

        Pen pen2 = new Pen();
        pen2.color = "black";
        pen2.type = "ballpoint";

    //this keyword helps function undertstand which object has called it
        pen1.printColor(); 
        pen2.printColor();
        
    //THIS IS FOR STUDENT CLASS
        Student std1=new Student();
        std1.name="aman";
        std1.age=24;

        std1.printInfo();
    }
}

#Abstraction 
n Java (and programming in general), abstraction is like that toy car. It means we hide all the complicated stuff (like how the car works) and only show the important parts that you need to use (like pushing it to make it go).
How Does This Work in Java?
Classes and Objects:
Think of a class as a blueprint for a toy. It tells us what the toy should look like and what it can do.
An object is like the actual toy made from that blueprint.
Abstract Classes:
An abstract class is like a special kind of blueprint that can't be used to make a toy directly. Instead, it's meant to be used by other blueprints (called subclasses) that will create specific toys.
For example, if we have an abstract class called Animal, we can’t create an animal directly. Instead, we can create specific animals like Dog or Cat that use the Animal blueprint.
Abstract Methods:
An abstract method is like saying, "I want my toy to make a sound, but I won’t say what sound it makes here." The specific toys (like Dog or Cat) will decide what sound they make.
So, in our Animal class, we might say there’s an abstract method called makeSound(), but we don’t define what sound it makes until we create a specific animal.
Example
Here’s a simple way to think about it:
java
// This is an abstract class
abstract class Animal {
    // This is an abstract method
    public abstract void makeSound();
}

// This is a specific animal
class Dog extends Animal {
    // Now we say what sound the dog makes
    public void makeSound() {
        System.out.println("Woof!");
    }
}

// This is another specific animal
class Cat extends Animal {
    // Now we say what sound the cat makes
    public void makeSound() {
        System.out.println("Meow!");
    }
}

Summary
Abstraction helps us focus on what things do instead of how they do it.
We use abstract classes as blueprints that can't be used directly, and abstract methods let us decide later what specific things will do.
Just like with your toy car, you can play without knowing all the details about how it works!